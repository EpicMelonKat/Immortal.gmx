<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>met = false

xspd=0
yspd=0

randomize()
npctype = choose("mayor","healer","witch","fortuneteller","keeper","merchant","blacksmith","mercenary","wizard","dummy","challenger")
gender = choose("male","female")

scr_npcdialogue()

if npctype = "mayor" {
dialogue[1] = "Hello there, Player!"
dialogue[2] = "Looks like you're new around here!"
diamax = 2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_depth()

if npctype = "healer"{
    if gender = "male"{
        sprite_index=spr_healerm
    }
    if gender = "female"{
        sprite_index=spr_healerf
    }
}
if npctype = "wizard"{
    sprite_index=spr_wizard
}
if npctype = "keeper"{
    sprite_index=spr_keeper
}
if npctype = "merchant"{
    sprite_index=spr_merchant
}
if npctype = "mayor"{
    sprite_index=spr_mayor
}
if npctype = "blacksmith"{
    sprite_index=spr_blacksmith
}
if npctype = "fortuneteller"{
    sprite_index=spr_fortuneteller
}
if npctype = "witch"{
    sprite_index=spr_witch
}
if npctype = "mercenary"{
    if gender = "male"{
        sprite_index=spr_mercenarym
    }
    if gender = "female"{
        sprite_index=spr_mercenaryf
    }
}
if npctype = "dummy" {
    sprite_index = spr_dummy
}
if npctype = "challenger" {
    sprite_index = spr_challenger
}

if instance_exists(obj_player) {
if place_meeting(x,y,obj_player) {
if keyboard_check_pressed(vk_space) {
    if npctype = "mayor" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    if npctype = "witch" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],meeting_text[2],meeting_text[3],meeting_text[4],greeting[1],greeting[2],greeting[3])
    } else {
    scr_dialogue(greeting[1],greeting[2],greeting[3])
    }
    }
    if npctype = "healer" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "fortuneteller" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],meeting_text[2],meeting_text[3],meeting_text[4],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "wizard" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],meeting_text[2],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "clown" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1],joke)
    }
    }
    
    if npctype = "mercenary" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "merchant" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "keeper" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }

    if npctype = "challenger" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "blacksmith" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "reformer" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],meeting_text[2],meeting_text[3],meeting_text[4])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "bowman" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "craftsman" {
    if met = false {
        met = true
        scr_dialogue(meeting_text[1],meeting_text[2],meeting_text[3],greeting[1])
    } else {
    scr_dialogue(greeting[1])
    }
    }
    
    if npctype = "dummy" {
    if met = false {
        met = true
        scr_dialogue(greeting[1],greeting[2])
    } else {
    scr_dialogue(greeting[1],greeting[2])
    }
    }
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
