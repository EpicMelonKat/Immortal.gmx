<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dynastyblade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mwep=10
selectedweapon = 1
attackable=true
weapon_type = "melee"
cursprite = sprite_index
melee_fov = 50
attack_duration = 6
attacking = false
math_set_epsilon(0.000001)
weapon_type = global.weapons[sprite_index*10+1]
element = global.weapons[sprite_index*10+2]
dist_damage = global.weapons[sprite_index*10+3]
dist_elemental = global.weapons[sprite_index*10+4]
attack_duration = global.weapons[sprite_index*10+5]
ability_cooldown = global.weapons[sprite_index*10+6]
melee_fov = global.weapons[sprite_index*10+7]
//show_message(string(weapon_type))
//show_message(string(element))
//show_message(string(dist_damage))
//show_message(string(dist_elemental))
//show_message(string(attack_duration))
//show_message(string(ability_cooldown))
//show_message(string(melee_fov))
setdamage=true



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attackable = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = curdir
direction = image_angle
attacking = false
alarm[1] = attack_duration*room_speed
self.hit_list = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 1
image_yscale = 1

if setdamage = true {
    setdamage = false
    x = holder.x
    y = holder.y

    randomize()
    tmod = random_range(0.8,1)
    damage = round(dist_damage*distance_to_point(room_width/2,room_height/2)*tmod)+1
    eldamage = round(dist_elemental*distance_to_point(room_width/2,room_height/2)*tmod)+1
}



scr_weaponmovement()
scr_attack()
scr_dealdamage()
scr_weaponchanger()//testing

if attacking = true {
        if tdir &gt; 0 and tdir &lt; 90 {
            direction -= 4
            image_xscale=-1
        }
        if tdir &gt;=90 and tdir &lt; 180 {
            direction += 4
        }
        if tdir &gt;=180 and tdir &lt; 270 {
            direction -= 4
            image_xscale=-1
        }
        if tdir &gt;=270 and tdir &lt; 360 {
            direction += 4
        }
        image_angle = direction
}


//if attacking = true {
//    if tdir &gt; 90 and tdir &lt; 270 {
//        direction+=4
//    }
//    else {
//        direction-=4
//    }
//    image_angle=direction
//}
//image_angle = point_direction(x,y,mouse_x,mouse_y)-90
//direction = image_angle

if cursprite != sprite_index {
weapon_type = global.weapons[sprite_index*10+1]
element = global.weapons[sprite_index*10+2]
dist_damage = global.weapons[sprite_index*10+3]
dist_elemental = global.weapons[sprite_index*10+4]
attack_duration = global.weapons[sprite_index*10+5]
ability_cooldown = global.weapons[sprite_index*10+6]
melee_fov = global.weapons[sprite_index*10+7]

//show_message(string(weapon_type))
//show_message(string(element))
//show_message(string(dist_damage))
//show_message(string(dist_elemental))
//show_message(string(attack_duration))
//show_message(string(ability_cooldown))
//show_message(string(melee_fov))





randomize()
tmod = random_range(0.7,1)
damage = round(dist_damage*distance_to_point(room_width/2,room_height/2)*tmod)+1
eldamage = round(dist_elemental*distance_to_point(room_width/2,room_height/2)*tmod)+1

}

if attacking = true {
if tdir &gt; 0 and tdir &lt; 180 { //back
            if holder.lastdir = "down" or holder.left_key=true or holder.right_key=true{
                holder.minframe = 4
                holder.image_index=holder.minframe
            }
            depth = holder.depth+1
            holder.lastdir = "up"
        }
        
        if tdir &gt;= 180 and tdir &lt;= 360 { //front
            if holder.lastdir = "up" or holder.left_key=true or holder.right_key=true{
                holder.minframe = 0
                holder.image_index = holder.minframe
            }
            depth = holder.depth-1
            holder.lastdir = "down"
        }
}

cursprite = sprite_index
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
